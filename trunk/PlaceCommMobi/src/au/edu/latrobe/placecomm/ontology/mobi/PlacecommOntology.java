// file: PlacecommOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package au.edu.latrobe.placecomm.ontology.mobi;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: PlacecommOntology.java
 * @author ontology bean generator
 * @version 2010/12/27, 16:31:17
 */
public class PlacecommOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "placecomm";
  // The singleton instance of this ontology
  private static MicroIntrospector introspect = new MicroIntrospector();
  private static Ontology theInstance = new PlacecommOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String HASLOCATION1_FSPEED="fspeed";
    public static final String HASLOCATION1_LAT="lat";
    public static final String HASLOCATION1_LON="lon";
    public static final String HASLOCATION1="HasLocation1";
    public static final String HASQUERY_SPARQLRESULTS="SparqlResults";
    public static final String HASQUERY_SPARQLQUERY="SPARQLQuery";
    public static final String HASQUERY="HasQuery";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEMAC="gotBluetoothDeviceMAC";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATLAT="gotBluetoothDeviceAtLAT";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICENAME="gotBluetoothDeviceName";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATCELL="gotBluetoothDeviceAtCell";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICESPEED="gotBluetoothDeviceSPEED";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHTIMESTAMP="gotBluetoothTimestamp";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATALT="gotBluetoothDeviceAtAlt";
    public static final String GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATLON="gotBluetoothDeviceAtLON";
    public static final String GOTBLUETOOTHDEVICE="GotBluetoothDevice";
    public static final String GOTGSMCELLTOWER="GotGSMCellTower";
    public static final String HASPERSON_KNOWS="knows";
    public static final String HASPERSON_HASPERSONALCONTEXT="hasPersonalContext";
    public static final String HASPERSON_FIRSTNAME="firstName";
    public static final String HASPERSON_AGE="age";
    public static final String HASPERSON_AGENTID="agentID";
    public static final String HASPERSON_OWNDEVICE="ownDevice";
    public static final String HASPERSON_GETMARRIEDTO="getMarriedTo";
    public static final String HASPERSON_PERSONPRESENCEATPLACE="personPresenceAtPlace";
    public static final String HASPERSON_DOB="DOB";
    public static final String HASPERSON_FRIENDOF="friendOf";
    public static final String HASPERSON_EMAIL="email";
    public static final String HASPERSON_MIDDLENAME="middleName";
    public static final String HASPERSON_HASPARENTS="hasParents";
    public static final String HASPERSON_HASCHILD="hasChild";
    public static final String HASPERSON_MOBILEPHONE="mobilephone";
    public static final String HASPERSON_FULLNAME="fullName";
    public static final String HASPERSON_LASTNAME="lastName";
    public static final String HASPERSON="HasPerson";
    public static final String LEAVING_LEAVINGGOODBYE="leavingGOODBYE";
    public static final String LEAVING="Leaving";
    public static final String PLACECONTEXT="PlaceContext";
    public static final String DEVICECONTEXT="DeviceContext";
    public static final String ADVERTISING_ADVERTISINGDATA="advertisingDATA";
    public static final String ADVERTISING_ADVERTISINGNEVER="advertisingNEVER";
    public static final String ADVERTISING_ADVERTISINGNOTTHISTIME="advertisingNOTTHISTIME";
    public static final String ADVERTISING_ADVERTISINGINFORM="advertisingINFORM";
    public static final String ADVERTISING_ADVERTISINGADVERTISING="advertisingADVERTISING";
    public static final String ADVERTISING="Advertising";
    public static final String AMBIENTSERVICE_PROVIDEDATPLACE="providedAtPlace";
    public static final String AMBIENTSERVICE="AmbientService";
    public static final String LOCATIONCONTEXT="LocationContext";
    public static final String PLACE_CREATEDBYAGENT="createdByAgent";
    public static final String PLACE_HASLOCATION="hasLocation";
    public static final String PLACE_BELONGTO="belongTo";
    public static final String PLACE_HASEVENT="hasEvent";
    public static final String PLACE_HASDEVICEPRESENCE="hasDevicePresence";
    public static final String PLACE_HASPERSONPRESENCE="hasPersonPresence";
    public static final String PLACE_HASPLACECONTEXT="hasPlaceContext";
    public static final String PLACE="Place";
    public static final String JOINING_JOININGACCEPT="joiningACCEPT";
    public static final String JOINING_JOININGHELLO="joiningHELLO";
    public static final String JOINING_JOININGJOINPROPOSE="joiningJOINPROPOSE";
    public static final String JOINING_JOININGINTRODUCE="joiningINTRODUCE";
    public static final String JOINING_JOININGREJECT="joiningREJECT";
    public static final String JOINING="Joining";
    public static final String PERSONALCONTEXT="PersonalContext";
    public static final String GENERALSERVICE="GeneralService";
    public static final String PERSON_KNOWS="knows";
    public static final String PERSON_HASCURRENTLOCATION="hasCurrentLocation";
    public static final String PERSON_HASPERSONALCONTEXT="hasPersonalContext";
    public static final String PERSON_FIRSTNAME="firstName";
    public static final String PERSON_AGE="age";
    public static final String PERSON_OWNDEVICE="ownDevice";
    public static final String PERSON_GETMARRIEDTO="getMarriedTo";
    public static final String PERSON_PERSONPRESENCEATPLACE="personPresenceAtPlace";
    public static final String PERSON_DOB="DOB";
    public static final String PERSON_FRIENDOF="friendOf";
    public static final String PERSON_EMAIL="email";
    public static final String PERSON_MIDDLENAME="middleName";
    public static final String PERSON_HASPARENTS="hasParents";
    public static final String PERSON_HASCHILD="hasChild";
    public static final String PERSON_MOBILEPHONE="mobilephone";
    public static final String PERSON_FULLNAME="fullName";
    public static final String PERSON_LASTNAME="lastName";
    public static final String PERSON="Person";
    public static final String DEVICE_HOSTSAGENT="hostsAgent";
    public static final String DEVICE_HASDEVICECONTEXT="hasDeviceContext";
    public static final String DEVICE_DEVICEPRESENCEATPLACE="devicePresenceAtPlace";
    public static final String DEVICE_MACADDRESS="MACAddress";
    public static final String DEVICE_HASOWNER="hasOwner";
    public static final String DEVICE_DEVICEID="DeviceID";
    public static final String DEVICE="Device";
    public static final String POSTALADDRESS_STREETNUMBER="streetNumber";
    public static final String POSTALADDRESS_STREETNAME="streetName";
    public static final String POSTALADDRESS_POSTCODE="postCode";
    public static final String POSTALADDRESS_COUNTRY="Country";
    public static final String POSTALADDRESS_POSTALADDRESSNAME="postalAddressName";
    public static final String POSTALADDRESS_SUBURB="suburb";
    public static final String POSTALADDRESS_DATE="date";
    public static final String POSTALADDRESS="PostalAddress";
    public static final String ACTIVITY_ACTIVITYNAME="activityName";
    public static final String ACTIVITY_HASPERSONINVOLVED="hasPersonInvolved";
    public static final String ACTIVITY="Activity";
    public static final String LOCATION_HASLOCATIONCONTEXT="hasLocationContext";
    public static final String LOCATION_ALTITUDE="altitude";
    public static final String LOCATION_BELONGTOPLACE="belongtoPlace";
    public static final String LOCATION_HASPOSTALADDRESS="hasPostalAddress";
    public static final String LOCATION_LATITUDE="latitude";
    public static final String LOCATION_SPEED="speed";
    public static final String LOCATION_LONGITUDE="longitude";
    public static final String LOCATION="Location";
    public static final String AGENT_AGENTID="agentID";
    public static final String AGENT="Agent";
    public static final String EVENT_HAPPENAT="happenAt";
    public static final String EVENT_EVENTNAME="eventName";
    public static final String EVENT="Event";
    public static final String PROTOCOL="Protocol";
    public static final String POSITIONING_POSITIONINGYOUAREIN="positioningYOUAREIN";
    public static final String POSITIONING_POSITIONINGWHEREAMI="positioningWHEREAMI";
    public static final String POSITIONING="Positioning";
    public static final String SERVICE_SERVICEMANAGEDBY="serviceManagedBy";
    public static final String SERVICE_SERVICEDESCRIPTION="serviceDescription";
    public static final String SERVICE_SERVICENAME="serviceName";
    public static final String SERVICE="Service";
    public static final String CONTEXT="Context";
    public static final String PBVC_HASMEMBER="hasMember";
    public static final String PBVC_HASACTIVITY="hasActivity";
    public static final String PBVC_HASPLACE="hasPlace";
    public static final String PBVC_HASSERVICE="hasService";
    public static final String PBVC="PBVC";
    public static final String TIME="Time";

  /**
   * Constructor
  */
  private PlacecommOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema timeSchema = new ConceptSchema(TIME);
    add(timeSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Time"));
    ConceptSchema pbvcSchema = new ConceptSchema(PBVC);
    add(pbvcSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.PBVC"));
    ConceptSchema contextSchema = new ConceptSchema(CONTEXT);
    add(contextSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Context"));
    ConceptSchema serviceSchema = new ConceptSchema(SERVICE);
    add(serviceSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Service"));
    ConceptSchema positioningSchema = new ConceptSchema(POSITIONING);
    add(positioningSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Positioning"));
    ConceptSchema protocolSchema = new ConceptSchema(PROTOCOL);
    add(protocolSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Protocol"));
    ConceptSchema eventSchema = new ConceptSchema(EVENT);
    add(eventSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Event"));
    ConceptSchema agentSchema = new ConceptSchema(AGENT);
    add(agentSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Agent"));
    ConceptSchema locationSchema = new ConceptSchema(LOCATION);
    add(locationSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Location"));
    ConceptSchema activitySchema = new ConceptSchema(ACTIVITY);
    add(activitySchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Activity"));
    ConceptSchema postalAddressSchema = new ConceptSchema(POSTALADDRESS);
    add(postalAddressSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.PostalAddress"));
    ConceptSchema deviceSchema = new ConceptSchema(DEVICE);
    add(deviceSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Device"));
    ConceptSchema personSchema = new ConceptSchema(PERSON);
    add(personSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Person"));
    ConceptSchema generalServiceSchema = new ConceptSchema(GENERALSERVICE);
    add(generalServiceSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.GeneralService"));
    ConceptSchema personalContextSchema = new ConceptSchema(PERSONALCONTEXT);
    add(personalContextSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.PersonalContext"));
    ConceptSchema joiningSchema = new ConceptSchema(JOINING);
    add(joiningSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Joining"));
    ConceptSchema placeSchema = new ConceptSchema(PLACE);
    add(placeSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Place"));
    ConceptSchema locationContextSchema = new ConceptSchema(LOCATIONCONTEXT);
    add(locationContextSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.LocationContext"));
    ConceptSchema ambientServiceSchema = new ConceptSchema(AMBIENTSERVICE);
    add(ambientServiceSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.AmbientService"));
    ConceptSchema advertisingSchema = new ConceptSchema(ADVERTISING);
    add(advertisingSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Advertising"));
    ConceptSchema deviceContextSchema = new ConceptSchema(DEVICECONTEXT);
    add(deviceContextSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.DeviceContext"));
    ConceptSchema placeContextSchema = new ConceptSchema(PLACECONTEXT);
    add(placeContextSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.PlaceContext"));
    ConceptSchema leavingSchema = new ConceptSchema(LEAVING);
    add(leavingSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.Leaving"));

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema hasPersonSchema = new PredicateSchema(HASPERSON);
    add(hasPersonSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.HasPerson"));
    PredicateSchema gotGSMCellTowerSchema = new PredicateSchema(GOTGSMCELLTOWER);
    add(gotGSMCellTowerSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.GotGSMCellTower"));
    PredicateSchema gotBluetoothDeviceSchema = new PredicateSchema(GOTBLUETOOTHDEVICE);
    add(gotBluetoothDeviceSchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.GotBluetoothDevice"));
    PredicateSchema hasQuerySchema = new PredicateSchema(HASQUERY);
    add(hasQuerySchema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.HasQuery"));
    PredicateSchema hasLocation1Schema = new PredicateSchema(HASLOCATION1);
    add(hasLocation1Schema, Class.forName("au.edu.latrobe.placecomm.ontology.mobi.HasLocation1"));


    // adding fields
    pbvcSchema.add(PBVC_HASSERVICE, serviceSchema, 0, ObjectSchema.UNLIMITED);
    pbvcSchema.add(PBVC_HASPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    pbvcSchema.add(PBVC_HASACTIVITY, activitySchema, 0, ObjectSchema.UNLIMITED);
    pbvcSchema.add(PBVC_HASMEMBER, agentSchema, 0, ObjectSchema.UNLIMITED);
    serviceSchema.add(SERVICE_SERVICENAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    serviceSchema.add(SERVICE_SERVICEDESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    serviceSchema.add(SERVICE_SERVICEMANAGEDBY, agentSchema, 0, ObjectSchema.UNLIMITED);
    positioningSchema.add(POSITIONING_POSITIONINGWHEREAMI, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    positioningSchema.add(POSITIONING_POSITIONINGYOUAREIN, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    eventSchema.add(EVENT_EVENTNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    eventSchema.add(EVENT_HAPPENAT, timeSchema, 0, ObjectSchema.UNLIMITED);
    agentSchema.add(AGENT_AGENTID, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    locationSchema.add(LOCATION_LONGITUDE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_SPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_LATITUDE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_HASPOSTALADDRESS, postalAddressSchema, 0, ObjectSchema.UNLIMITED);
    locationSchema.add(LOCATION_BELONGTOPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    locationSchema.add(LOCATION_ALTITUDE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_HASLOCATIONCONTEXT, locationContextSchema, 0, ObjectSchema.UNLIMITED);
    activitySchema.add(ACTIVITY_HASPERSONINVOLVED, personSchema, 0, ObjectSchema.UNLIMITED);
    activitySchema.add(ACTIVITY_ACTIVITYNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_DATE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_SUBURB, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_POSTALADDRESSNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_COUNTRY, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_POSTCODE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_STREETNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_STREETNUMBER, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    deviceSchema.add(DEVICE_DEVICEID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_HASOWNER, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    deviceSchema.add(DEVICE_MACADDRESS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_DEVICEPRESENCEATPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    deviceSchema.add(DEVICE_HASDEVICECONTEXT, deviceContextSchema, 0, ObjectSchema.UNLIMITED);
    deviceSchema.add(DEVICE_HOSTSAGENT, agentSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_LASTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_FULLNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_MOBILEPHONE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_HASCHILD, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_HASPARENTS, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_MIDDLENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_EMAIL, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_FRIENDOF, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_DOB, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_PERSONPRESENCEATPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_GETMARRIEDTO, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_OWNDEVICE, deviceSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_AGE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_FIRSTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_HASPERSONALCONTEXT, personalContextSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_HASCURRENTLOCATION, locationSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_KNOWS, personSchema, 0, ObjectSchema.UNLIMITED);
    joiningSchema.add(JOINING_JOININGREJECT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    joiningSchema.add(JOINING_JOININGINTRODUCE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    joiningSchema.add(JOINING_JOININGJOINPROPOSE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    joiningSchema.add(JOINING_JOININGHELLO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    joiningSchema.add(JOINING_JOININGACCEPT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    placeSchema.add(PLACE_HASPLACECONTEXT, placeContextSchema, 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_HASPERSONPRESENCE, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_HASDEVICEPRESENCE, deviceSchema, 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_HASEVENT, eventSchema, 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_BELONGTO, pbvcSchema, 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_HASLOCATION, locationSchema, 0, ObjectSchema.UNLIMITED);
    placeSchema.add(PLACE_CREATEDBYAGENT, agentSchema, 0, ObjectSchema.UNLIMITED);
    ambientServiceSchema.add(AMBIENTSERVICE_PROVIDEDATPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    advertisingSchema.add(ADVERTISING_ADVERTISINGADVERTISING, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    advertisingSchema.add(ADVERTISING_ADVERTISINGINFORM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    advertisingSchema.add(ADVERTISING_ADVERTISINGNOTTHISTIME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    advertisingSchema.add(ADVERTISING_ADVERTISINGNEVER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    advertisingSchema.add(ADVERTISING_ADVERTISINGDATA, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    leavingSchema.add(LEAVING_LEAVINGGOODBYE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_LASTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_FULLNAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_MOBILEPHONE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_HASCHILD, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_HASPARENTS, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_MIDDLENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_EMAIL, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_FRIENDOF, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_DOB, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_PERSONPRESENCEATPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_GETMARRIEDTO, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_OWNDEVICE, deviceSchema, 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_AGENTID, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_AGE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_FIRSTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasPersonSchema.add(HASPERSON_HASPERSONALCONTEXT, personalContextSchema, 0, ObjectSchema.UNLIMITED);
    hasPersonSchema.add(HASPERSON_KNOWS, personSchema, 0, ObjectSchema.UNLIMITED);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATLON, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATALT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHTIMESTAMP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICESPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATCELL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEATLAT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gotBluetoothDeviceSchema.add(GOTBLUETOOTHDEVICE_GOTBLUETOOTHDEVICEMAC, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasQuerySchema.add(HASQUERY_SPARQLQUERY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasQuerySchema.add(HASQUERY_SPARQLRESULTS, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    hasLocation1Schema.add(HASLOCATION1_LON, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasLocation1Schema.add(HASLOCATION1_LAT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasLocation1Schema.add(HASLOCATION1_FSPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    positioningSchema.addSuperSchema(protocolSchema);
    personSchema.addSuperSchema(agentSchema);
    generalServiceSchema.addSuperSchema(serviceSchema);
    personalContextSchema.addSuperSchema(contextSchema);
    joiningSchema.addSuperSchema(protocolSchema);
    locationContextSchema.addSuperSchema(contextSchema);
    ambientServiceSchema.addSuperSchema(serviceSchema);
    advertisingSchema.addSuperSchema(protocolSchema);
    deviceContextSchema.addSuperSchema(contextSchema);
    placeContextSchema.addSuperSchema(contextSchema);
    leavingSchema.addSuperSchema(protocolSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
