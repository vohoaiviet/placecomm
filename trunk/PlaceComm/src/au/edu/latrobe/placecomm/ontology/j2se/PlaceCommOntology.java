// file: PlaceCommOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package au.edu.latrobe.placecomm.ontology.j2se;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: PlaceCommOntology.java
 * @author ontology bean generator
 * @version 2011/04/28, 11:06:16
 */
public class PlaceCommOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "PlaceComm";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new PlaceCommOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String EVENT_HASPERSONINVOLVED="hasPersonInvolved";
    public static final String EVENT="Event";
    public static final String PERSON_OWNDEVICE="ownDevice";
    public static final String PERSON_LASTNAME="lastName";
    public static final String PERSON_HASCHILDREN="hasChildren";
    public static final String PERSON_FIRSTNAME="firstName";
    public static final String PERSON_FULLNAME="fullName";
    public static final String PERSON_FRIENDOF="friendOf";
    public static final String PERSON_PERSONPRESENCEATPLACE="personPresenceAtPlace";
    public static final String PERSON_PERSONID="personID";
    public static final String PERSON_KNOWS="knows";
    public static final String PERSON_HASPARENT="hasParent";
    public static final String PERSON_HOMEPAGE="homepage";
    public static final String PERSON_MIDDLENAME="middleName";
    public static final String PERSON_EMAILADDRESS="emailaddress";
    public static final String PERSON_GOTMARRIED="gotMarried";
    public static final String PERSON="Person";
    public static final String PLACE_HASDEVICEPRESENCE="hasDevicePresence";
    public static final String PLACE_HASPERSONPRESENCE="hasPersonPresence";
    public static final String PLACE_HASLOCATION="hasLocation";
    public static final String PLACE="Place";
    public static final String ACTIVITY_HASPERSONINVOLVED="hasPersonInvolved";
    public static final String ACTIVITY="Activity";
    public static final String LOCATION_LON="lon";
    public static final String LOCATION_ALT="alt";
    public static final String LOCATION_SPEED="speed";
    public static final String LOCATION_LAT="lat";
    public static final String LOCATION="Location";
    public static final String DEVICE_DEVICEPRESENCE="devicePresence";
    public static final String DEVICE_MANUFACTURER="manufacturer";
    public static final String DEVICE_MACADDRESS="MACAddress";
    public static final String DEVICE_DEVICEID="deviceID";
    public static final String DEVICE_HASOWNER="hasOwner";
    public static final String DEVICE_DEVICENAME="deviceName";
    public static final String DEVICE="Device";
    public static final String POSTALADDRESS_POSTCODE="postCode";
    public static final String POSTALADDRESS_STREETNUMBER="streetNumber";
    public static final String POSTALADDRESS_DATE="date";
    public static final String POSTALADDRESS_STREETNAME="streetName";
    public static final String POSTALADDRESS_POSTALADDRESSNAME="postalAddressName";
    public static final String POSTALADDRESS_COUNTRY="Country";
    public static final String POSTALADDRESS_SUBURB="suburb";
    public static final String POSTALADDRESS="PostalAddress";
    public static final String CONTEXT_HASTIMEINSTANCE="hasTimeInstance";
    public static final String CONTEXT="Context";
    public static final String HASQUERY_SQUERY="sQuery";
    public static final String HASQUERY_SQUERYRESULT="sQueryResult";
    public static final String HASQUERY="HasQuery";
    public static final String SERVICE="Service";
    public static final String PBVC_HASEVENT="hasEvent";
    public static final String PBVC_HASMEMBER="hasMember";
    public static final String PBVC_HASPLACE="hasPlace";
    public static final String PBVC="PBVC";
    public static final String TIMEINSTANCE="TimeInstance";

  /**
   * Constructor
  */
  private PlaceCommOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema timeInstanceSchema = new PredicateSchema(TIMEINSTANCE);
    add(timeInstanceSchema, au.edu.latrobe.placecomm.ontology.j2se.TimeInstance.class);
    PredicateSchema pbvcSchema = new PredicateSchema(PBVC);
    add(pbvcSchema, au.edu.latrobe.placecomm.ontology.j2se.PBVC.class);
    PredicateSchema serviceSchema = new PredicateSchema(SERVICE);
    add(serviceSchema, au.edu.latrobe.placecomm.ontology.j2se.Service.class);
    PredicateSchema hasQuerySchema = new PredicateSchema(HASQUERY);
    add(hasQuerySchema, au.edu.latrobe.placecomm.ontology.j2se.HasQuery.class);
    PredicateSchema contextSchema = new PredicateSchema(CONTEXT);
    add(contextSchema, au.edu.latrobe.placecomm.ontology.j2se.Context.class);
    PredicateSchema postalAddressSchema = new PredicateSchema(POSTALADDRESS);
    add(postalAddressSchema, au.edu.latrobe.placecomm.ontology.j2se.PostalAddress.class);
    PredicateSchema deviceSchema = new PredicateSchema(DEVICE);
    add(deviceSchema, au.edu.latrobe.placecomm.ontology.j2se.Device.class);
    PredicateSchema locationSchema = new PredicateSchema(LOCATION);
    add(locationSchema, au.edu.latrobe.placecomm.ontology.j2se.Location.class);
    PredicateSchema activitySchema = new PredicateSchema(ACTIVITY);
    add(activitySchema, au.edu.latrobe.placecomm.ontology.j2se.Activity.class);
    PredicateSchema placeSchema = new PredicateSchema(PLACE);
    add(placeSchema, au.edu.latrobe.placecomm.ontology.j2se.Place.class);
    PredicateSchema personSchema = new PredicateSchema(PERSON);
    add(personSchema, au.edu.latrobe.placecomm.ontology.j2se.Person.class);
    PredicateSchema eventSchema = new PredicateSchema(EVENT);
    add(eventSchema, au.edu.latrobe.placecomm.ontology.j2se.Event.class);


    // adding fields
    //pbvcSchema.add(PBVC_HASPLACE, placeSchema, 0, ObjectSchema.UNLIMITED);
    pbvcSchema.add(PBVC_HASMEMBER, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    //pbvcSchema.add(PBVC_HASEVENT, eventSchema, 0, ObjectSchema.UNLIMITED);
    hasQuerySchema.add(HASQUERY_SQUERYRESULT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hasQuerySchema.add(HASQUERY_SQUERY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
   // contextSchema.add(CONTEXT_HASTIMEINSTANCE, timeInstanceSchema, 0, ObjectSchema.UNLIMITED);
    postalAddressSchema.add(POSTALADDRESS_SUBURB, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_COUNTRY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_POSTALADDRESSNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_STREETNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_DATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_STREETNUMBER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    postalAddressSchema.add(POSTALADDRESS_POSTCODE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_DEVICENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_HASOWNER, personSchema, ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_DEVICEID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_MACADDRESS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_MANUFACTURER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    deviceSchema.add(DEVICE_DEVICEPRESENCE, placeSchema, ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_LAT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_SPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_ALT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_LON, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    //activitySchema.add(ACTIVITY_HASPERSONINVOLVED, personSchema, 0, ObjectSchema.UNLIMITED);
   // placeSchema.add(PLACE_HASLOCATION, locationSchema, 0, ObjectSchema.UNLIMITED);
   // placeSchema.add(PLACE_HASPERSONPRESENCE, personSchema, 0, ObjectSchema.UNLIMITED);
    //placeSchema.add(PLACE_HASDEVICEPRESENCE, deviceSchema, 0, ObjectSchema.UNLIMITED);
   // personSchema.add(PERSON_GOTMARRIED, personSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_EMAILADDRESS, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_MIDDLENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_HOMEPAGE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
   // personSchema.add(PERSON_HASPARENT, personSchema, 0, ObjectSchema.UNLIMITED);
  //  personSchema.add(PERSON_KNOWS, personSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_PERSONID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_PERSONPRESENCEATPLACE, placeSchema, ObjectSchema.OPTIONAL);
 //   personSchema.add(PERSON_FRIENDOF, personSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_FULLNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_FIRSTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
   // personSchema.add(PERSON_HASCHILDREN, personSchema, 0, ObjectSchema.UNLIMITED);
    personSchema.add(PERSON_LASTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
  //  personSchema.add(PERSON_OWNDEVICE, deviceSchema, 0, ObjectSchema.UNLIMITED);
   // eventSchema.add(EVENT_HASPERSONINVOLVED, personSchema, 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
